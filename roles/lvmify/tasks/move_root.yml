- name: Mount oldroot
  mount:
    src: "{{ root_partition_fullname }}"
    path: /mnt/oldroot
    fstype: ext4
    state: ephemeral

- name: Copy old root
  ansible.builtin.import_tasks:
    file: guarded_rsync.yml
  vars:
    rsync_src: /mnt/oldroot/
    rsync_dst: /mnt/copyroot
    guard_file: /bin/bash

- name: Unmount oldroot
  mount:
    path: /mnt/oldroot
    state: unmounted

- name: Read device information (always use unit when probing)
  community.general.parted: device=/dev/sda unit=MiB
  register: sdb_info

- name: Wipe out root drive partitions
  community.general.parted:
    device: '{{ root_drive_fullname }}'
    number: '{{ item.num }}'
    state: absent
  loop: '{{ sdb_info.partitions }}'

- name: Create single large partition (so we can do shit later)
  community.general.parted:
    device: '{{ root_drive_fullname }}'
    number: 1
    state: present

- name: Add original root drive to VG
  community.general.lvg:
    vg: main
    force: true
    pvs: "{{root_drive_fullname}}1"

- name: Create final root LV
  community.general.lvol:
    vg: main
    lv: root
    size: 100%FREE
  when: "'root' not in ansible_facts['lvm']['lvs']"

- name: Format our new lv
  community.general.filesystem:
    fstype: ext4
    dev: /dev/main/root

- name: Mount lv
  ansible.posix.mount:
    src: /dev/main/root
    path: /mnt/root
    fstype: ext4
    state: ephemeral

- name: "Copy root back in place"
  ansible.builtin.import_tasks:
    file: guarded_rsync.yml
  vars:
    rsync_src: /mnt/copyroot/
    rsync_dst: /mnt/root
    guard_file: /bin/bash

- name: Configure grub in chroot
  import_tasks:
    file: chroot_conf_grub.yml
  vars:
    chroot_dir: "/mnt/root"
    root_drive: "{{ root_drive_fullname }}"

- name: Unmount lv
  ansible.posix.mount:
    path: /mnt/root
    state: unmounted

- name: Perform reboot
  ansible.builtin.reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: uptime
